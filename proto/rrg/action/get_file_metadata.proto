// Copyright 2023 Google LLC
//
// Use of this source code is governed by an MIT-style license that can be found
// in the LICENSE file or at https://opensource.org/licenses/MIT.
syntax = "proto3";

package rrg.action.get_file_metadata;

import "rrg/fs.proto";

message Args {
  // Root paths to the files to get the metadata for.
  //
  // If `max_depth` is non-zero, metadata for subfolders and their contents up
  // to that limit are returned as well.
  //
  // Note that if a path points to a symbolic link, the metadata associated
  // with the link itself will be returned, not the metadata of the file that
  // the link points to.
  repeated rrg.fs.Path paths = 1;

  // Limit on the depth of recursion when visiting subfolders.
  //
  // The default value (0) means that there is no recursion and only metadata
  // about the root path is returned.
  uint32 max_depth = 2;

  // Whether to collect [MD5 digest][1] of the file contents.
  //
  // Supported only if the `action-get_file_metadata-md5` feature is enabled.
  //
  // [1]: https://en.wikipedia.org/wiki/MD5
  bool md5 = 3;

  // Whether to collect [SHA-1 digest][1] of the file contents.
  //
  // Supported only if the `action-get_file_metadata-sha1` feature is enabled.
  //
  // [1]: https://en.wikipedia.org/wiki/SHA-1
  bool sha1 = 4;

  // Whether to collect [SHA-256 digest][2] of the file contents.
  //
  // Supported only if the `action-get_file_metadata-sha256` feature is enabled.
  //
  // [1]: https://en.wikipedia.org/wiki/SHA-2
  bool sha256 = 5;

  // Regex to restrict the results only to those with matching paths.
  //
  // Note that this is not merely doing _filtering_ of the results, it is doing
  // _pruning_. The difference is that when doing a recursive walk, path that do
  // not match the given regex will be discarded from the results and they will
  // not be descended into.
  string path_pruning_regex = 6;

  // Whether to collect canonical path to the file.
  //
  // Path canonicalization can be relatively expensive as it might need to
  // resolve multiple symlinks along the way and thus should not be enabled for
  // cases where long filesystem traversals are expected.
  bool path_canonical = 7;
}

message Result {
  // Path to the file.
  //
  // This is the original root path of the file as specified in the arguments,
  // possibly with some suffix in case of child files.
  rrg.fs.Path path = 1;

  // Metadata of the file.
  rrg.fs.FileMetadata metadata = 2;

  // Extended attributes of the file.
  //
  // This field is supported only on Linux and macOS.
  repeated rrg.fs.FileExtAttr ext_attrs = 3;

  // A symlink value of the file.
  //
  // This field is set only if the file is a symlink.
  //
  // Note that this path might be relative. Moreover, it is not canonicalized
  // in any way and might not even exist (a dangling symlink).
  rrg.fs.Path symlink = 4;

  // [MD5 digest][1] of the file contents.
  //
  // Collected only if the `action-get_file_metadata-md5` feature is enabled
  // and `md5` argument was provided.
  //
  // [1]: https://en.wikipedia.org/wiki/MD5
  bytes md5 = 5;

  // [SHA-1 digest][1] of the file contents.
  //
  // Collected only if the `action-get_file_metadata-sha1` feature is enabled
  // and `sha1` argument was provided.
  //
  // [1]: https://en.wikipedia.org/wiki/SHA-1
  bytes sha1 = 6;

  // [SHA-256 digest][1] of the file contents.
  //
  // Collected only if the `action-get_file_metadata-sha256` feature is enabled
  // and `sha256` argument was provided.
  //
  // [1]: https://en.wikipedia.org/wiki/SHA-2
  bytes sha256 = 7;

  // Canonical path to the file.
  //
  // Collected only if requested via the `path_canonical` argument.
  rrg.fs.Path path_canonical = 8;
}
